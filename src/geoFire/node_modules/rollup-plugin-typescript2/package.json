{
  "_args": [
    [
      {
        "raw": "rollup-plugin-typescript2@^0.15.0",
        "scope": null,
        "escapedName": "rollup-plugin-typescript2",
        "name": "rollup-plugin-typescript2",
        "rawSpec": "^0.15.0",
        "spec": ">=0.15.0 <0.16.0",
        "type": "range"
      },
      "/home/laboratoria/Downloads/geofire-js-master"
    ]
  ],
  "_from": "rollup-plugin-typescript2@>=0.15.0 <0.16.0",
  "_id": "rollup-plugin-typescript2@0.15.1",
  "_inCache": true,
  "_location": "/rollup-plugin-typescript2",
  "_nodeVersion": "8.11.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/rollup-plugin-typescript2_0.15.1_1529942300451_0.47323520183725076"
  },
  "_npmUser": {
    "name": "ezolenko",
    "email": "zolenkoe@gmail.com"
  },
  "_npmVersion": "5.6.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "rollup-plugin-typescript2@^0.15.0",
    "scope": null,
    "escapedName": "rollup-plugin-typescript2",
    "name": "rollup-plugin-typescript2",
    "rawSpec": "^0.15.0",
    "spec": ">=0.15.0 <0.16.0",
    "type": "range"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/rollup-plugin-typescript2/-/rollup-plugin-typescript2-0.15.1.tgz",
  "_shasum": "7b35d0eaa6ad5a54a253ed158a565b99d8f15372",
  "_shrinkwrap": null,
  "_spec": "rollup-plugin-typescript2@^0.15.0",
  "_where": "/home/laboratoria/Downloads/geofire-js-master",
  "author": {
    "name": "@ezolenko"
  },
  "bugs": {
    "url": "https://github.com/ezolenko/rollup-plugin-typescript2/issues"
  },
  "dependencies": {
    "fs-extra": "^5.0.0",
    "resolve": "^1.7.1",
    "rollup-pluginutils": "^2.0.1",
    "tslib": "1.9.2"
  },
  "description": "Seamless integration between Rollup and TypeScript. Now with errors.",
  "devDependencies": {
    "@types/colors": "^1.2.1",
    "@types/fs-extra": "^5.0.0",
    "@types/graphlib": "^2.1.4",
    "@types/lodash": "^4.14.108",
    "@types/node": "^8.0.47",
    "@types/object-hash": "^1.2.0",
    "@types/resolve": "^0.0.8",
    "colors": "^1.2.4",
    "graphlib": "^2.1.5",
    "lodash": "^4.17.10",
    "object-hash": "^1.3.0",
    "rimraf": "^2.6.2",
    "rollup": "^0.59.4",
    "rollup-plugin-commonjs": "^9.1.3",
    "rollup-plugin-node-resolve": "^3.3.0",
    "rollup-plugin-re": "^1.0.7",
    "rollup-plugin-typescript2": "github:ezolenko/rollup-plugin-typescript2#master",
    "rollup-watch": "^4.3.1",
    "tslint": "^5.10.0",
    "typescript": "^2.9.1"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-lJ/yfIj1fmp0KyfgPmd2QFeRpLgXlc58fS3Ha9Loc7/p3qByDL7CRndcI9MflE/pUSrfUdDjZMR0mHSKvqrZ+g==",
    "shasum": "7b35d0eaa6ad5a54a253ed158a565b99d8f15372",
    "tarball": "https://registry.npmjs.org/rollup-plugin-typescript2/-/rollup-plugin-typescript2-0.15.1.tgz",
    "fileCount": 47,
    "unpackedSize": 3322303,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJbMREcCRA9TVsSAnZWagAA5OsQAIQiqiV3zMd8rzvH9bxv\nS9219jKoOjIav6XHwy4HgB0DH5lhsZqDggcK2kwmNtHUp4KsK+oDjPBZUgRt\nKTChhojRjkSdILSnMa8taeXK5TIVpggSPhOgd5mxnC1Hl3AxvElS27odE1cd\ngbQW/GHly4QDmTmWwR/YyqhPnRkMXL6ZX+sqeX4Rf+q/Zo4Xw6VbI45nQeXv\nqaG+fEzezXAnpf+qYl75Qu/3edzxStNgG1KwlVi2gPNwV98b8ku/bmkFCSPj\naYS6sLO93hESDXp/ZzitlivLwzWBjf6wph4e5/wHlqq64kJ0qq9KptHPztKh\nrtkFPvymrRYouAzD83QWtHR5K1WPgPa98Xu2ECL2CMabHVLOiswk165U2D2v\n/GIL9ZhorVWimHo//vqVTMj+FpG+bqQ6rKBjNKWXNiAfRzhk8+m7cqNbRfM6\n+rBw6ZjshHnrRrHvzjKJqkJ4L9eWvMeGU4FScPzgNi4iC3mYZRdrqTB9bgL2\nCThJfAyEIJrhLI1HKtvpbDhQ3IQEz97FtA9U8OAzO6DWZHiYTIEw5i/8pQ03\nithICvqY8oblJMONTsl3zxTn1zdr4StWtUFEc8afNTCABvCHzLz3x7wZ2GyT\nqkZpBKa8MiNfohhnJ63vRNfnf3OnVa34lnSxMsgoBcAKVE/JvcD31PlWiroX\nOvyD\r\n=iM/B\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "files": [
    "dist",
    "src"
  ],
  "gitHead": "ffe3b6cd9fc03611460aac15d2b880fab7a7d093",
  "homepage": "https://github.com/ezolenko/rollup-plugin-typescript2",
  "jsnext:main": "dist/rollup-plugin-typescript2.es.js",
  "keywords": [
    "rollup-plugin-typescript2",
    "rollup-plugin-typescript",
    "rollup-plugin",
    "typescript",
    "es2015",
    "rollup",
    "npm"
  ],
  "license": "MIT",
  "main": "dist/rollup-plugin-typescript2.cjs.js",
  "maintainers": [
    {
      "name": "ezolenko",
      "email": "zolenkoe@gmail.com"
    }
  ],
  "module": "dist/rollup-plugin-typescript2.es.js",
  "name": "rollup-plugin-typescript2",
  "optionalDependencies": {},
  "peerDependencies": {
    "rollup": ">=0.50.0",
    "typescript": ">=2.4.0"
  },
  "readme": "# rollup-plugin-typescript2\r\n\r\n[![npm-version](https://img.shields.io/npm/v/rollup-plugin-typescript2.svg?maxAge=2592000)](https://npmjs.org/package/rollup-plugin-typescript2)\r\n![npm-dependencies](https://img.shields.io/david/ezolenko/rollup-plugin-typescript2.svg?maxAge=2592000)\r\n![npm-monthly-downloads](https://img.shields.io/npm/dm/rollup-plugin-typescript2.svg?maxAge=2592000)\r\n[![Codeship Status](https://app.codeship.com/projects/fe9cf8f0-e8d4-0134-ec88-4e3d33dcd7ed/status?branch=master)](https://app.codeship.com/projects/207445)\r\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/e19b72ab9658405bbfb32dd6d65d1856)](https://www.codacy.com/app/zolenkoe/rollup-plugin-typescript2?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ezolenko/rollup-plugin-typescript2&amp;utm_campaign=Badge_Grade)\r\n\r\nRollup plugin for typescript with compiler errors.\r\n\r\nThis is a rewrite of original rollup-plugin-typescript, starting and borrowing from [this fork](https://github.com/alexlur/rollup-plugin-typescript).\r\n\r\nThis version is somewhat slower than original, but it will print out typescript syntactic and semantic diagnostic messages (the main reason for using typescript after all).\r\n\r\n## Usage\r\n\r\n```js\r\n// rollup.config.js\r\nimport typescript from 'rollup-plugin-typescript2';\r\n\r\nexport default {\r\n\tentry: './main.ts',\r\n\r\n\tplugins: [\r\n\t\ttypescript(/*{ plugin options }*/)\r\n\t]\r\n}\r\n```\r\n\r\nThe plugin inherits all compiler options and file lists from your `tsconfig.json` file. If your tsconfig has another name or another relative path from the root directory, see `tsconfigDefaults`, `tsconfig` and `tsconfigOverride` options below. This also allows for passing in different tsconfig files depending on your build target.\r\n\r\n#### Some compiler options are forced\r\n\r\n* `noEmitHelpers`: false\r\n* `importHelpers`: true\r\n* `noResolve`: false\r\n* `noEmit`: false\r\n* `inlineSourceMap`: false (see [#71](https://github.com/ezolenko/rollup-plugin-typescript2/issues/71))\r\n* `outDir`: `./placeholder` in cache root, see [83](https://github.com/ezolenko/rollup-plugin-typescript2/issues/83) and [Microsoft/TypeScript/issues/24715](https://github.com/Microsoft/TypeScript/issues/24715)\r\n* `declarationDir`: `process.cwd()` (*only if `useTsconfigDeclarationDir` is false in the plugin options*)\r\n* `moduleResolution`: `node` (*`classic` is [deprecated](https://www.typescriptlang.org/docs/handbook/module-resolution.html). It also breaks this plugin, see [#12](https://github.com/ezolenko/rollup-plugin-typescript2/issues/12) and [#14](https://github.com/ezolenko/rollup-plugin-typescript2/issues/14)*)\r\n\r\n#### Some compiler options have more than one compatible value.\r\n\r\n* `module`: defaults to `ES2015`, other valid value is `ESNext` (required for dynamic imports, see [#54](https://github.com/ezolenko/rollup-plugin-typescript2/issues/54)).\r\n\r\n### Compatibility\r\n\r\n#### rollup-plugin-node-resolve\r\n\r\nMust be before this plugin in the plugin list, especially when `browser: true` option is used, see [#66](https://github.com/ezolenko/rollup-plugin-typescript2/issues/66)\r\n\r\n#### rollup-plugin-commonjs\r\n\r\nSee explanation for `rollupCommonJSResolveHack` option below.\r\n\r\n### Plugin options\r\n\r\n* `tsconfigDefaults`: `{}`\r\n\r\n\tThe object passed as `tsconfigDefaults` will be merged with loaded `tsconfig.json`. Final config passed to typescript will be the result of values in `tsconfigDefaults` replaced by values in loaded `tsconfig.json`, replaced by values in `tsconfigOverride` and then replaced by hard `compilerOptions` overrides on top of that (see above).\r\n\r\n\tFor simplicity and other tools' sake, try to minimize usage of defaults and overrides and keep everything in `tsconfig.json` file (tsconfigs can themselves be chained, so save some turtles).\r\n\r\n\t```js\r\n\tlet defaults = { compilerOptions: { declaration: true } };\r\n\tlet override = { compilerOptions: { declaration: false } };\r\n\r\n\t// ...\r\n\tplugins: [\r\n\t\ttypescript({\r\n\t\t\ttsconfigDefaults: defaults,\r\n\t\t\ttsconfig: \"tsconfig.json\",\r\n\t\t\ttsconfigOverride: override\r\n\t\t})\r\n\t]\r\n\t```\r\n\r\n\tThis is a [deep merge](https://lodash.com/docs/4.17.4#merge) (objects are merged, arrays are concatenated, primitives are replaced, etc), increase `verbosity` to 3 and look for `parsed tsconfig` if you get something unexpected.\r\n\r\n* `tsconfig`: `undefined`\r\n\r\n    Path to `tsconfig.json`. Set this if your tsconfig has another name or relative location from the project directory. By default will try to load `./tsconfig.json`, but will not fail if file is missing unless the value is set explicitly.\r\n\r\n* `tsconfigOverride`: `{}`\r\n\r\n\tSee `tsconfigDefaults`.\r\n\r\n* `check`: true\r\n\r\n\tSet to false to avoid doing any diagnostic checks on the code.\r\n\r\n* `verbosity`: 1\r\n\r\n\t- 0 -- Error\r\n\t- 1 -- Warning\r\n\t- 2 -- Info\r\n\t- 3 -- Debug\r\n\r\n* `clean`: false\r\n\r\n\tSet to true for clean build (wipes out cache on every build).\r\n\r\n* `cacheRoot`: `./.rts2_cache`\r\n\r\n\tPath to cache. Defaults to a folder in the current directory. Can be safely moved out with something like `${require('temp-dir')}/.rpt2_cache`, but watch out for multiple concurrent builds of the same repo.\r\n\r\n* `include`: `[ \"*.ts+(|x)\", \"**/*.ts+(|x)\" ]`\r\n\r\n\tBy default passes all .ts files through typescript compiler.\r\n\r\n* `exclude`: `[ \"*.d.ts\", \"**/*.d.ts\" ]`\r\n\r\n\tBut excludes type definitions.\r\n\r\n* `abortOnError`: true\r\n\r\n\tBail out on first syntactic or semantic error. In some cases setting this to false will result in exception in rollup itself (for example for unresolvable imports).\r\n\r\n* `rollupCommonJSResolveHack`: false\r\n\r\n\tOn windows typescript resolver favors POSIX path, while commonjs plugin (and maybe others?) uses native path as module id. This can result in `namedExports` being ignored if rollup happened to use typescript's resolution. Set to true to pass resolved module path through `resolve()` to match up with `rollup-plugin-commonjs`.\r\n\r\n* `useTsconfigDeclarationDir`: false\r\n\r\n\tIf true, declaration files will be emitted in the directory given in the tsconfig. If false, the declaration files will be placed inside the destination directory given in the Rollup configuration.\r\n\r\n* `typescript`: typescript module installed with the plugin\r\n\r\n\tWhen typescript version installed by the plugin (latest 2.x) is unacceptable, you can import your own typescript module and pass it in as `typescript: require(\"typescript\")`. Must be 2.0+, things might break if transpiler interfaces changed enough from what the plugin was built against.\r\n\r\n* `transformers`: `undefined`\r\n\r\n\t**experimental**, typescript 2.4.1+\r\n\r\n\tTransformers will likely be available in tsconfig eventually, so this is not a stable interface, see [Microsoft/TypeScript/issues/14419](https://github.com/Microsoft/TypeScript/issues/14419).\r\n\r\n\tFor example, integrating [kimamula/ts-transformer-keys](https://github.com/kimamula/ts-transformer-keys):\r\n\r\n\t```js\r\n\tconst keysTransformer = require('ts-transformer-keys/transformer').default;\r\n\tconst transformer = (service) =>\r\n\t{\r\n  \t\tbefore: [ keysTransformer(service.getProgram()) ],\r\n  \t\tafter: []\r\n\t};\r\n\r\n\t// ...\r\n\tplugins: [\r\n\t\ttypescript({ transformers: [transformer] })\r\n\t]\r\n\t```\r\n\r\n### Declarations\r\n\r\nThis plugin respects `declaration: true` in your `tsconfig.json` file. When set, it will emit `*.d.ts` files for your bundle. The resulting file(s) can then be used with the `types` property in your `package.json` file as described [here](https://www.typescriptlang.org/docs/handbook/declaration-files/publishing.html).\r\nBy default, the declaration files will be located in the same directory as the generated Rollup bundle. If you want to override this behavior and instead use the declarationDir set `useTsconfigDeclarationDir` to `true` in the plugin options.\r\n\r\n### Watch mode\r\n\r\nThe way typescript handles type-only imports and ambient types effectively hides them from rollup watch, because import statements are not generated and changing them doesn't trigger a rebuild.\r\n\r\nOtherwise the plugin should work in watch mode. Make sure to run a normal build after watch session to catch any type errors.\r\n\r\n### Version\r\n\r\nThis plugin currently requires TypeScript `2.4+`.\r\n\r\n### Rollup version\r\n\r\nThis plugin currently requires rollup `0.50+`.\r\n\r\n### Reporting bugs\r\n\r\nReport any bugs on github: <https://github.com/ezolenko/rollup-plugin-typescript2/issues>.\r\n\r\nAttach your `tsconfig.json`, `package.json` (for versions of dependencies), rollup script and anything else that could influence module resolution, ambient types and typescript compilation.\r\n\r\nCheck if problem is reproducible after running `npm prune` to clear any rogue types from npm_modules (by default typescript grabs all ambient types).\r\n\r\nCheck if you get the same problem with `clean` option set to true (might indicate a bug in the cache).\r\n\r\nIf makes sense, check if running `tsc` directly produces similar results.\r\n\r\nAttach plugin output with `verbosity` option set to 3 (this will list all files being transpiled and their imports).\r\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ezolenko/rollup-plugin-typescript2.git"
  },
  "scripts": {
    "build": "rollup -c",
    "build-self": "rollup -c rollup.config.self.js",
    "lint": "tslint -c ./tslint.json src/*.ts ./*.js",
    "prebuild": "rimraf dist/*",
    "watch": "rollup -c -w rollup.config.self.js"
  },
  "types": "dist/index.d.ts",
  "version": "0.15.1"
}
